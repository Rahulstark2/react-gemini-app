import { useState} from'react'

const App = () => {
    const [ value, setValue ] = useState("")
    const [error, setError] = useState("")
    const [chatHistory, setChatHistory] = useState([])

    const surpriseOptions = [
        'Who won the latest Novel Peace Prize?',
        'Where does pizza come from?',
        'Who do you make a BLT sandwich?'
    ]
    const surprise = () => {
        const randomValue = surpriseOptions[Math.floor(Math.random() * surpriseOptions.length)]
        setValue(randomValue)
    }

    const getResponse = async () => {
        if(!value) {
            setError("Error! Please ask a question!")
            return
        }
        try {
            const options = {
                method: 'POST',
                body: JSON.stringify({
                    history: chatHistory,
                    message: value
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            }
            const response = await fetch('http://localhost:8000/gemini',options)
            const data = await response.text()
            console.log(data)
            setChatHistory(oldChatHistory => [...oldChatHistory, {
                role: "user",
                parts: value
            },
                {
                    role: "model",
                    parts: data
                }
            ])

        } catch(error) {
            console.error(error)
            setError("Soemthing went wrong! Please try again later.")
        }
    }

    const clear = () => {
        setValue("")
        setError("")
        setChatHistory([])
    }

  return (
    <div className="app">
        <p>What do you want to know?
          <button className="surprise" onClick={surprise} disabled={!chatHistory}>Surprise me</button>
        </p>
          <div className="input-container">
              <input
                  value={value}
                  placeholder="When is Christmas...?"
                  onChange={(e) => setValue(e.target.value)}
                  />
              {!error && <button onClick={getResponse}>Ask me</button>}
              {error && <button onClick={clear}>Clear</button>}

          </div>
          {error && <p>{error}</p>}
          <div className="search-result">
              {chatHistory.map((chatItem, _index) => <div key={""}>
                  <p className="answer">{chatItem.role}:{chatItem.parts}</p>
              </div>)}

          </div>
    </div>
  )
}

export default App;



const PORT = 8000
const express = require('express')
const cors = require('cors')
const app = express()
app.use(cors())
app.use(express.json())
require('dotenv').config()

const { GoogleGenerativeAI} = require('@google/generative-ai')

const genAI = new GoogleGenerativeAI(process.env.GOOGLE_GEN_AI_KEY)

app.post('/gemini',async(req, res) => {

        const model = genAI.getGenerativeModel({ model: "gemini-pro"})

        const chat = model.startChat({
                history: req.body.history
        })
        const msg = req.body.message

        const result = await chat.sendMessage(msg)
        const response = await result.response
        const text = response.text()
        res.send(text)
})
app.listen(PORT, () => console.log(`Listening on port ${PORT}`))
